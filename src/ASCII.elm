module ASCII exposing (..)

import Array
import List exposing (map, sum)

import IntComputer exposing (IntComputer, initComputer, run)

-- part one, visually: 7816

getView: List Int -> List Int
getView program =
    initComputer [] (Array.fromList program)
        |> run
        |> .output

initView: List Int -> String
initView charCodes =
    map Char.fromCode charCodes
        |> String.fromList

sumAlignments: List (Int, Int) -> Int
sumAlignments intersections =
    map (\(x, y) -> x * y) intersections
        |> sum

clean: List Int -> String -> IntComputer
clean program directions =
    let convertedDirections = map Char.toCode ((String.toList directions) ++ ['n', '\n'])
    in
    Array.fromList program
        |> Array.set 0 2
        |> initComputer convertedDirections
        |> run

--solution for part two: 952010
-- instructions = "A,A,B,C,B,C,B,C,B,A\nR,10,L,12,R,6\nR,6,R,10,R,12,R,6\nR,10,L,12,L,12"
-- again done manually
-- List.head (List.reverse (.output (clean input instructions)))


-- my map
--............................#......................
--............................#......................
--..........#######...........#......................
--..........#.....#...........#......................
--..........#.....#...........#.......###########....
--..........#.....#...........#.......#.........#....
--..........#.....#...........#############.....#....
--..........#.....#...................#...#.....#....
--..........#.....#.....#############.#...#.....#....
--..........#.....#.....#...........#.#...#.....#....
--..........#.....#.....#...........#.#############..
--..........#.....#.....#...........#.....#.....#.#..
--..........#.....#############.....#.....#.....#.#..
--..........#...........#.....#.....#.....#.....#.#..
--^##########...........#.###########.....#.....#.#..
--......................#.#...#...........#.....#.#..
--......................#.#...#...........#######.#..
--......................#.#...#...................#..
--......................#######...............#######
--........................#...................#...#.#
--........................#.#######...........#...#.#
--........................#.#.....#...........#...#.#
--........................#.#.....#.....###########.#
--........................#.#.....#.....#.....#.....#
--........................#.#.....#.....#.....#.....#
--........................#.#.....#.....#.....#.....#
--........................#############.#.....#.....#
--..........................#.....#...#.#.....#.....#
--..........................#.....#...#.#############
--..........................#.....#...#.......#......
--..........................#.....#############......
--..........................#.........#..............
--..........................###########..............